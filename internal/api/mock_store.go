// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination mock_store.go -package api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"
	domain "serv/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ControlTokenDB mocks base method.
func (m *MockStore) ControlTokenDB(ctx context.Context, token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlTokenDB", ctx, token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlTokenDB indicates an expected call of ControlTokenDB.
func (mr *MockStoreMockRecorder) ControlTokenDB(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlTokenDB", reflect.TypeOf((*MockStore)(nil).ControlTokenDB), ctx, token)
}

// DeleteDB mocks base method.
func (m *MockStore) DeleteDB(ctx context.Context, c int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDB", ctx, c)
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockStoreMockRecorder) DeleteDB(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockStore)(nil).DeleteDB), ctx, c)
}

// GetBookDB mocks base method.
func (m *MockStore) GetBookDB(cxt context.Context, id int) domain.Books {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookDB", cxt, id)
	ret0, _ := ret[0].(domain.Books)
	return ret0
}

// GetBookDB indicates an expected call of GetBookDB.
func (mr *MockStoreMockRecorder) GetBookDB(cxt, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDB", reflect.TypeOf((*MockStore)(nil).GetBookDB), cxt, id)
}

// GetBooksDB mocks base method.
func (m *MockStore) GetBooksDB(ctx context.Context, n int) ([]domain.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksDB", ctx, n)
	ret0, _ := ret[0].([]domain.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksDB indicates an expected call of GetBooksDB.
func (mr *MockStoreMockRecorder) GetBooksDB(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksDB", reflect.TypeOf((*MockStore)(nil).GetBooksDB), ctx, n)
}

// PasswordDB mocks base method.
func (m *MockStore) PasswordDB(ctx context.Context, email string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordDB", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PasswordDB indicates an expected call of PasswordDB.
func (mr *MockStoreMockRecorder) PasswordDB(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordDB", reflect.TypeOf((*MockStore)(nil).PasswordDB), ctx, email)
}

// SaveBook mocks base method.
func (m *MockStore) SaveBook(ctx context.Context, c domain.Books, r int) domain.Books {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", ctx, c, r)
	ret0, _ := ret[0].(domain.Books)
	return ret0
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockStoreMockRecorder) SaveBook(ctx, c, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockStore)(nil).SaveBook), ctx, c, r)
}

// Session mocks base method.
func (m *MockStore) Session(ctx context.Context, s domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockStoreMockRecorder) Session(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockStore)(nil).Session), ctx, s)
}

// UpdateDb mocks base method.
func (m *MockStore) UpdateDb(ctx context.Context, id int, c domain.Books) domain.Books {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDb", ctx, id, c)
	ret0, _ := ret[0].(domain.Books)
	return ret0
}

// UpdateDb indicates an expected call of UpdateDb.
func (mr *MockStoreMockRecorder) UpdateDb(ctx, id, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDb", reflect.TypeOf((*MockStore)(nil).UpdateDb), ctx, id, c)
}

// UserDB mocks base method.
func (m *MockStore) UserDB(ctx context.Context, user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDB", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDB indicates an expected call of UserDB.
func (mr *MockStoreMockRecorder) UserDB(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDB", reflect.TypeOf((*MockStore)(nil).UserDB), ctx, user)
}
